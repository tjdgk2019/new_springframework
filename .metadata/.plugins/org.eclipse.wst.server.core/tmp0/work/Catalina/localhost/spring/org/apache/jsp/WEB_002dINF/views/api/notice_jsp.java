/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-07-01 08:53:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class notice_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>공지사항이당당</title>\r\n");
      out.write("<style>\r\n");
      out.write("	#content {\r\n");
      out.write("		width : 800px;\r\n");
      out.write("		height : auto;\r\n");
      out.write("		margin : auto;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	#outerDiv{\r\n");
      out.write("		width : 800px;\r\n");
      out.write("		height : 400px;\r\n");
      out.write("		padding-top : 50px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.noticeEl {\r\n");
      out.write("		width: 100%;\r\n");
      out.write("		height : 60px;\r\n");
      out.write("		margin: auto;\r\n");
      out.write("		line-height: 60px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.noticeEl > div {\r\n");
      out.write("		display: inline-block;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	#title{\r\n");
      out.write("		margin-top : 100px;\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	#detail{\r\n");
      out.write("		background-color : #999;\r\n");
      out.write("		width:800px; \r\n");
      out.write("		margin: auto;\r\n");
      out.write("		text-align:center;\r\n");
      out.write("		color : white;\r\n");
      out.write("		height : 150px;\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	#detail > div{\r\n");
      out.write("		height : 50px;\r\n");
      out.write("		line-height: 50px;\r\n");
      out.write("		border : 1px solid rgba(255, 255, 255, 0.656);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/menubar.jsp", out, false);
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"content\">\r\n");
      out.write("		<h1 id=\"title\">공지사항 게시판입니다!</h1>\r\n");
      out.write("		<button class=\"btn btn-danger btn-sm\" data-toggle=\"modal\" href=\"#noticeModal\">글작성</button>\r\n");
      out.write("\r\n");
      out.write("	</div>	\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"detail\">\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../common/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"modal fade\" id=\"noticeModal\">\r\n");
      out.write("		<div class=\"modal-dialog\">\r\n");
      out.write("		  <div class=\"modal-content\">\r\n");
      out.write("	\r\n");
      out.write("			<div class=\"card\">\r\n");
      out.write("			  <div class=\"card-header text-white\" style=\"background-color: #ff52a0;\">게시글 작성하기</div>\r\n");
      out.write("			  <div class=\"card-body\">       \r\n");
      out.write("				\r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>작성자</label>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" id='noticeWriter' value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ sessionScope.loginUser.userId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly>\r\n");
      out.write("				  </div>\r\n");
      out.write("				  \r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>제목</label>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" id='noticeTitle' value=\"\">\r\n");
      out.write("				  </div>\r\n");
      out.write("		\r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>내용</label>\r\n");
      out.write("					<textarea class=\"form-control\" rows=\"5\" id='noticeContent' style=\"resize: none;\"></textarea>\r\n");
      out.write("				  </div>\r\n");
      out.write("				 \r\n");
      out.write("				  <a class=\"btn\" data-dismiss=\"modal\"\r\n");
      out.write("			  style=\"background-color: #ff52a0; height: 40px; color: white; border: 0px solid #388E3C; opacity: 0.8\">닫기</a>&nbsp;&nbsp;\r\n");
      out.write("					  <a class=\"btn\" onclick=\"insert();\"\r\n");
      out.write("				  style=\"background-color: red; height: 40px; color: white; border: 0px solid #388E3C; opacity: 0.8\">작성하기</a>&nbsp;&nbsp;\r\n");
      out.write("				   \r\n");
      out.write("			  </div>\r\n");
      out.write("			</div>\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"modal fade\" id=\"updateModal\">\r\n");
      out.write("		<div class=\"modal-dialog\">\r\n");
      out.write("		  <div class=\"modal-content\">\r\n");
      out.write("	\r\n");
      out.write("			<div class=\"card\">\r\n");
      out.write("			  <div class=\"card-header text-white\" style=\"background-color: #ff52a0;\">게시글 수정하기</div>\r\n");
      out.write("			  <div class=\"card-body\">       \r\n");
      out.write("				\r\n");
      out.write("					<input type=\"hidden\" value=\"\" id=\"updateNo\"/>\r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>작성자</label>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" id='updateWriter' value=\"\" readonly>\r\n");
      out.write("				  </div>\r\n");
      out.write("				  \r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>제목</label>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" id='updateTitle' value=\"\">\r\n");
      out.write("				  </div>\r\n");
      out.write("		\r\n");
      out.write("				  <div class=\"form-group\">\r\n");
      out.write("					<label>내용</label>\r\n");
      out.write("					<textarea class=\"form-control\" rows=\"5\" id='updateContent' style=\"resize: none;\"></textarea>\r\n");
      out.write("				  </div>\r\n");
      out.write("				 \r\n");
      out.write("				  <a class=\"btn\" data-dismiss=\"modal\"\r\n");
      out.write("			  style=\"background-color: #ff52a0; height: 40px; color: white; border: 0px solid #388E3C; opacity: 0.8\">닫기</a>&nbsp;&nbsp;\r\n");
      out.write("					  <a class=\"btn\" onclick=\"update();\"\r\n");
      out.write("				  style=\"background-color: orange; height: 40px; color: white; border: 0px solid #388E3C; opacity: 0.8\">수정하기</a>&nbsp;&nbsp;\r\n");
      out.write("				   \r\n");
      out.write("			  </div>\r\n");
      out.write("			</div>\r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	<script>\r\n");
      out.write("	 window.onload = () => {\r\n");
      out.write("	        findAll();\r\n");
      out.write("	    }\r\n");
      out.write("		\r\n");
      out.write("	 function insert() {\r\n");
      out.write("	        const requestData = {\r\n");
      out.write("        		 \"noticeTitle\" : $('#noticeTitle').val(),\r\n");
      out.write("                 \"noticeWriter\" : $('#noticeWriter').val(),\r\n");
      out.write("                 \"noticeContent\" : $(\"#noticeContent\").val()\r\n");
      out.write("	        };\r\n");
      out.write("\r\n");
      out.write("	        $.ajax({\r\n");
      out.write("	            url: 'notice',\r\n");
      out.write("	            type: 'post',\r\n");
      out.write("	            data : requestData,\r\n");
      out.write("	            success: response => {\r\n");
      out.write("	                //console.log(response);\r\n");
      out.write("\r\n");
      out.write("	                if(response.message === '서비스 요청 성공') {\r\n");
      out.write("		               $('#outerDiv').remove();\r\n");
      out.write("		               findAll();\r\n");
      out.write("		               $('#noticeTitle').val('');\r\n");
      out.write("		               $('#noticeContent').val('');\r\n");
      out.write("\r\n");
      out.write("	                }\r\n");
      out.write("	            }\r\n");
      out.write("	        });\r\n");
      out.write("	    }\r\n");
      out.write("	 	\r\n");
      out.write("	 	function deleteById(noticeNo){\r\n");
      out.write("	 		$.ajax({\r\n");
      out.write("	 			url: 'notice/' +noticeNo,\r\n");
      out.write("	 			type: 'delete',\r\n");
      out.write("	 			success : response => {\r\n");
      out.write("	 				//console.log(response);\r\n");
      out.write("	 				if(response.data === '삭제성공'){\r\n");
      out.write("	 					$('#detail').slideUp(300);\r\n");
      out.write("	 					$('#outerDiv').remove();\r\n");
      out.write("	 					findAll();\r\n");
      out.write("	\r\n");
      out.write("	 				};\r\n");
      out.write("	 				\r\n");
      out.write("	 				\r\n");
      out.write("	 				\r\n");
      out.write("	 				\r\n");
      out.write("	 				\r\n");
      out.write("	 			}\r\n");
      out.write("	 		});\r\n");
      out.write("	 	}\r\n");
      out.write("	 	\r\n");
      out.write("	 	\r\n");
      out.write("		 $('#content').on('click', '.noticeEl', e => {\r\n");
      out.write("			    const noticeNo = $(e.currentTarget).children().eq(0).text();\r\n");
      out.write("			    $.ajax({\r\n");
      out.write("			        url: 'notice/' + noticeNo,\r\n");
      out.write("			        type: 'get',\r\n");
      out.write("			        success: response => {\r\n");
      out.write("			            const notice = response.data;\r\n");
      out.write("			            \r\n");
      out.write("			            const contentValue = '<div id=\"notice-detail\">'\r\n");
      out.write("			                               + '<div>' + notice.noticeTitle + '</div>'\r\n");
      out.write("			                               + '<div>' + notice.noticeContent + '</div>'\r\n");
      out.write("			                               + '<div>'\r\n");
      out.write("			                               + '<a class=\"btn btn-sm btn-warning\" data-toggle=\"modal\" href=\"#updateModal\">'\r\n");
      out.write("			                               + '수정하기'\r\n");
      out.write("			                               + '</a>'\r\n");
      out.write("			                               + '<a class=\"btn btn-sm btn-secondary\" onclick=\"deleteById('+notice.noticeNo +')\">삭제하기</a>'\r\n");
      out.write("			                               + '</div>'\r\n");
      out.write("			                               + '</div>';\r\n");
      out.write("			                               \r\n");
      out.write("			            $('#detail').html(contentValue);\r\n");
      out.write("			            $('#detail').slideDown(500);\r\n");
      out.write("			        }\r\n");
      out.write("			    });\r\n");
      out.write("			});\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		const findAll = () => {\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : 'notice',\r\n");
      out.write("				type : 'get',\r\n");
      out.write("				success : response => {\r\n");
      out.write("					\r\n");
      out.write("					//console.log(response);\r\n");
      out.write("					\r\n");
      out.write("					const noticeList = response.data;\r\n");
      out.write("					//console.log(noticeList);\r\n");
      out.write("					const outerDiv = document.createElement('div');\r\n");
      out.write("					outerDiv.id='outerDiv';\r\n");
      out.write("					\r\n");
      out.write("					//console.log(outerDiv);\r\n");
      out.write("					noticeList.map(o => {\r\n");
      out.write("                		\r\n");
      out.write("						const noticeEl = document.createElement('div');\r\n");
      out.write("                		noticeEl.className = 'noticeEl';\r\n");
      out.write("						\r\n");
      out.write("						/*\r\n");
      out.write("						noticeList.map(o => {\r\n");
      out.write("							//console.log(o);\r\n");
      out.write("							const noticeEl = document.createElement('div');\r\n");
      out.write("							noticeEl.className = 'noticeEl';\r\n");
      out.write("							\r\n");
      out.write("							const numEl = document.createElement('div');\r\n");
      out.write("							const numText = document.createTextNode(o.noticeNo);\r\n");
      out.write("							numEl.style.width = '50px';\r\n");
      out.write("							//console.log(numEl);\r\n");
      out.write("							//console.log(numText);\r\n");
      out.write("							numEl.appendChild(numText);\r\n");
      out.write("							//console.log(numEl);\r\n");
      out.write("							noticeEl.appendChild(numEl);\r\n");
      out.write("							\r\n");
      out.write("							const titleEl = document.createElement('div');\r\n");
      out.write("							const titleText = document.createTextNode(o.noticeTitle);\r\n");
      out.write("							titleEl.style.width = '400px';\r\n");
      out.write("							titleEl.appendChild(titleText);\r\n");
      out.write("							noticeEl.appendChild(titleEl);\r\n");
      out.write("							\r\n");
      out.write("							const writerEl = document.createElement('div');\r\n");
      out.write("							const writerText = document.createTextNode(o.noticeWriter);\r\n");
      out.write("							writerEl.style.width = '150px';\r\n");
      out.write("							writerEl.appendChild(writerText);\r\n");
      out.write("							noticeEl.appendChild(writerEl);\r\n");
      out.write("							\r\n");
      out.write("							const dateEl = document.createElement('div');\r\n");
      out.write("							const dateText = document.createTextNode(o.createDate);\r\n");
      out.write("							dateEl.style.width = '200px';\r\n");
      out.write("							dateEl.appendChild(dateText);\r\n");
      out.write("							noticeEl.appendChild(dateEl);\r\n");
      out.write("							\r\n");
      out.write("							console.log(noticeEl);\r\n");
      out.write("						*/\r\n");
      out.write("						\r\n");
      out.write("                		noticeEl.appendChild(createDiv(o.noticeNo, '50px'));\r\n");
      out.write("                        noticeEl.appendChild(createDiv(o.noticeTitle, '400px'));\r\n");
      out.write("                        noticeEl.appendChild(createDiv(o.noticeWriter, '150px'));\r\n");
      out.write("                        noticeEl.appendChild(createDiv(o.createDate, '200px'));\r\n");
      out.write("\r\n");
      out.write("                        //console.log(noticeEl);\r\n");
      out.write("\r\n");
      out.write("                        outerDiv.appendChild(noticeEl);\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("                    document.getElementById('content').appendChild(outerDiv);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function createDiv(data, style) {\r\n");
      out.write("        	\r\n");
      out.write("            const divEl = document.createElement('div');\r\n");
      out.write("            const divText = document.createTextNode(data);\r\n");
      out.write("            divEl.style.width = style;\r\n");
      out.write("            divEl.appendChild(divText);\r\n");
      out.write("            \r\n");
      out.write("            return divEl;\r\n");
      out.write("        }\r\n");
      out.write("		   \r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
